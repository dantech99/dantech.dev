[["Map",1,2,9,10,24,25,123,124],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.1.1","content-config-digest","44fb475d4f1e91a5","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"server\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":false,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":true,\"port\":4321,\"streaming\":true},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[]},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":\"shiki\",\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":false},\"legacy\":{\"collections\":false}}","articles",["Map",11,12],"ecmascript-versiones",{"id":11,"data":13,"body":19,"filePath":20,"digest":21,"legacyId":22,"deferredRender":23},{"title":14,"author":15,"img":16,"description":17,"date":18},"¿Qué Trajo Cada Versión de ECMAScript? Un Viaje Cronológico","Danilo A. Macea","/img/articles/cronologia-es.png","Vamos a explorar cada una de las versiones de ecmascript hasta nuestros días, conoceremos cada uno de los cambios que se introdujeron y como aportaron al mejoramiento del lenguaje de programacion mas usado hoy dia JavaScript","__DATE__","## Un viaje a Traves del tiempo: La evolución de ECMAScript que dio Forma a JavaScript\n\n### Introducción\n\nJavaScript es uno de los lenguajes de programación mas utilizados en el desarrollo web, fundamental para crear interfaces de usuario interactivas y dinámicas. Creado en 1995 por brendan Eich, paso por varios nombres (mocha, luego LiveScript) antes de establecerse como JavaScript.\n\nPero, ¿que es ECMAScrip? Es el estándar sobre el cual se basa JavaScript. Desarrollado y mantenido por la organización de estándares ECMA International, su designación oficial es ECMA-262. Cada nueva version de este estándar influye directamente en la evolución del lenguaje. En este articulo, exploraremos la cronología de ECMAScript y las actualizaciones clave que han mejorado JavaScript a lo largo de los años.\n\n---\n\n### ECMAScript 1 (1997)\n\nLa primera edición del estándar conocida como ES1, se lanzo en 1997. Se baso en el lenguaje JavaScript existente e incluyo sus características fundamentales como **variables, funciones y sentencias de control de flujo básicas.**\n\n```jsx\n// Ejemplo de una varaible en ES1\nvar nombre = \"Dantech.dev\";\nconsole.log(nombre); // Salida: \"Dantech.dev\"\n\n//Ejemplo de una funcion en ES1\nfunction sumar(a,b) {\n\treturn a + b;\n}\nconsole.log(sumar(1,2)); // salida: 3\n```\n\n### ECMAScript 2 (1998) y ECMAScript 3 (1999)\n\nLa segunda version, ES2, fue una actualización menor lanzada en 1998 que se centro principalmente en hacer el estándar mas consistente.\n\nUn años después, en 1999, llego ES3, que introdujo varias características importantes que hoy son fundamentales, como las expresiones regulares, las declaraciones  `try-catch` para el manejo de errores y un manejo de cadenas de texto mejorado.\n\n```jsx\nvar texto = \"Hola, mundo!\";\nvar regex = /hola/;\nconsole.log(regex.test(texto)); // salida: true\n\n//Ejemplo de una declaracion try-catch en ES3\ntry {\n\tvar x = y + 1 // 'y' no esta definida, lo que causara un error\n} catch (error) {\n\tconsole.log(error) // Salida: ReferenceError: y es not defined\n}\n```\n\n### ECMAScript 4 (Nunca lanzado)\n\nSe planeo una cuarta version con cambios muy significativos, como clases, interfaces y espacios de nombres (namespaces). sin embargo, la propuesta genero una gran oposición y su desarrollo fue finalmente abandonado, por lo que ES4 nunca vio la luz.\n\n### ECMAScript 5 (2009)\n\nTras una parga pausa, ES5 se lanzo en 2009. Esta version introdujo mejoras cruciales como:\n\n- Modo estricto `“use strict”`, una forma de optar por una variante restringida de JavaScript para una escritura de código mas segura\n- Soporte nativo para JSON, permitiendo analizar y convertir datos en este formato de manera sencilla\n- Mejora en la manipulación de arrays, con nuevos métodos como `indexOf()` y `map()`\n\n```jsx\n// Ejemplo de modo estricto en ES5\nfunction sumar(a, b){\n\t\"use strict\";\n\treturn a + b;\n}\nconsole.log(sumar(1,2)); // salida: 3\n\n// ejemplo de soporte para JSON en ES5\nvar jsonTexto = '{\"nombre\":\"dantech\", \"edad\":26}';\nvar jsonData = JSON.parce(jsonTexto);\n\n// Ejemplo de manipulacion de arrays mejorada en ES5\nvar numeros = [1,2,3,4,5];\nconsole.log(numeros.indexOf(3)) // Salida: 2\nconsole.log(numeros.map(function(numero){\n\treturn numero * 2;\n})); // salida: [2,4,6,8,10]\n```\n\nEn 2011, se lanzo ES5.1 una actualización menor enfocada en corregir errores y mejorar la consistencia del estándar.\n\n### ECMAScript 6 (2015) - La gran Renovación\n\nConocido popularmente como ES6, su lanzamiento en 2015 marco la mayor actualización del lenguaje hasta la fecha. Introdujo una sintaxis mas moderna y potente con características como:\n\n- Arrow Functions\n- template literals para una mejor interpolación de cadenas\n- clases, que ofrecen una sintaxis mas clara para la programación orientada a objetos\n\n```jsx\n// Ejemplo de let y const en ES6\nlet nombre = \"Dantech.dev\"\nconst edad = 26\n\n// Ejemplo de function de flecha o arrow function\nlet sumar = (a, b) => a + b;\nconsole.log(sumar(1, 2)); // Salida: 3\n\n// Ejemplo de plantillas literales en ES6\nlet mensaje = `¡Hola, ${nombre}!`;\nconsole.log(mensaje); // Salida: \"¡Hola, John Doe!\"\n\n// Ejemplo de una clase en ES6\nclass Persona {\n  constructor(nombre, edad) {\n    this.nombre = nombre;\n    this.edad = edad;\n  }\n  saludar() {\n    return `¡Hola, ${this.nombre}!`;\n  }\n}\nlet john = new Persona(\"John Doe\", 30);\nconsole.log(john.saludar()); // Salida: \"¡Hola, John Doe!\"\n```\n\nOtras características importantes de ES6 incluyen parámetros por defecto, desestructuración, y nuevas estructuras de datos como `Map` y `Set`\n\n### ECMAScript 2017 (ES8)\n\nEsta version de 2017 trajo consigo mejorar importantes para la programación asíncrona y a manipulación de objetos.\n\n- `async/await`: Una sintaxis mas limpia para trabajar promesas\n- `object.values()` y `object.entries()`: Método para obtener los valores o los pares [clave, valor] de un objeto.\n- Relleno de cadenas `(padStart` y `padEnd`)\n\n```jsx\n// Ejemplo de Object.values() y Object.entries() en ES8\nlet persona = { nombre: \"John Doe\", edad: 30 };\nconsole.log(Object.values(persona)); // Salida: [\"John Doe\", 30]\nconsole.log(Object.entries(persona)); // Salida: [[\"nombre\", \"John Doe\"], [\"age\", 30]]\n\n// Ejemplo de relleno de cadenas en ES8\nlet texto = \"Hola\";\nconsole.log(texto.padStart(10, '-')); // Salida: \"-----Hola\"\nconsole.log(texto.padEnd(10, '-'));   // Salida: \"Hola-----\"\n```\n\n### ECMAScript 20218 (ES9)\n\nES9, lanzada en 2018, continuo mejorando la asincronía y ma manipulación de objetos:\n\n- **iteración asíncrona** con `for-await-of`\n- `Promise.prototype.finally()`, que ejecuta código sin importar si una promesa se resolvió o fue rechazada\n- Propiedades `rest/spread` para objetos\n\n```jsx\n// Ejemplo de propeidades rest/spread en ES9\nlet persona = {nombre: \"danilo macea\", edad: 26, pais: \"colombia\"};\nlet {nombre, ...resto} = persona\n\n// ejemplo de Promise.prototype.finally() en ES9\nfetch('https://api.example.com/data')\n\t.then(data => console.log(data))\n\t.catch(error => console.log(error))\n\t.finally(() => console.log(\"!terminado\"));\n```\n\n### **ECMAScript 2019 (ES10)**\n\nEn 2019, ES10 añadió métodos útiles para trabajar con arrays y objetos\n\n- **`Array.prototype.flatMap()`**, una combinación de `map()` y `flat()`\n- `**Object.fromEntries()**`, que crea un objeto a partir de una lista de pares [clave, valor]\n\n```jsx\n// Ejemplo de flat() y flatMap() en ES10\nlet array = [1, 2, [3, 4]];\nconsole.log(array.flat()); // Salida: [1-4]\n\nlet numeros = [1-4];\nconsole.log(numeros.flatMap(x => [x, x * 2])); // Salida: [1, 2, 2-4, 4, 6, 7]\n\n// Ejemplo de Object.fromEntries() en ES10\nlet entradas = [['nombre', 'John Doe'], ['edad', 30]];\nconsole.log(Object.fromEntries(entradas)); // Salida: { nombre: \"John Doe\", edad: 30 }\n```\n\n## ECMAScript 2020 (ES11)\n\nES11 introdujo características para manejar números grandes y valores nulos de forma mas segura\n\n- `BigInt` para enteros de tamaño arbitrario\n- `Promise.allSettled()`\n- **Operador de coalescencia nula** `(??)`\n- **Encadenamiento opcional** `(?.)`\n- Campos privados en clases usando `#`\n\n```jsx\nclass Persona {\n  #nombre = \"danilo macea\"\n  #edad = 26;\n  \n  getNombre(){\n    return this.#nombre\n  }\n  getEdad(){\n    return this.#edad\n  }\n}\nlet persona = new Persona()\nconsole.log(persona.getNombre()) // Salida: \"Danilo macea\"\n\n// Ejmplo de coalescencia nula es ES11\nlet valor = null;\nconsole.log(valor  ?? \"default\") // Salida: Default\n```\n\n## ECMAScript 2021 (ES12)\n\nLanzada en 2021, esta version incluyo\n\n- Operadores de asignación lógica (`&&=`, `||=`)\n- Separadores numéricos (_) para mejorar la legibilidad de números grandes\n- `Primise.any(`), que se resuelve en cuanto una de las promesas del literal se cumple\n- `String.prototype.replaceAll()` para reemplazar todas las ocurrencias de una sub Cadena\n\n```jsx\n// Ejemplo de separadores numericos en ES12\nlet billon = 1_000_000_000;\nconsole.log(billon) // Salida  1000000000\n\n//Ejemplo de String.prototype.replaceAll() en ES12\nlet cadena = \"foo foo foo\";\nconsole.log(cadena.replaceAll(\"foo\", \"bar\")) // Salida: \"bar, bar, bar\"\n```\n\n## ECMAScript 2022 (ES13)\n\nLa decimotercera edición trajo varias adiciones significativas, incluyendo:\n\n- La capacidad de usar `await` en el nivel superior (fuera de una función `async`)\n- Nuevos elementos de clase como campos y métodos privados y estáticos\n- Bloques estáticos dentro de las clases para inicialización\n- El método `at()` para String  y Arrays, que permite indexación relativa (por ejemplo, `array.at(1)` para obtener el ultimo elemento\n- `Object.hasOwn`, una alternativa mas conveniente a `objetc.prototye.hasOwnProperty`\n- La propiedad `cause` en los objetos `Error` para registrar una cadena de casualidad en los errores\n\n## ECMAScript 2023 (ES14)\n\nLa version mas reciente, ES14, se centra en la inmutabilidad y la manipulación de arrays\n\n- Nuevos métodos en `Array.prototype` que devuelven una nueva copia del array en lugar de modificar el original, como `toSorted()`, `toReversed()` y `with()`\n- Métodos para buscar desde el final de un array: `finLast()` y `findLastIndex()`\n- Soporte para comentarios `#!` (**(hashbang/shebang),** permitiendo que los archivos ECMAScript sean directamente ejecutables desde la Linea de comandos\n- Permite el uso de la mayoría de los Símbolos como claves en colecciones débiles\n\n```jsx\n// ejemplo del metodo toSorted() devuleve un nuevo array ordenado, dejando el original sin cambios\nlet arr = [1,2,3];\nlet sotedArr = arr.toSorted()\nconsole.log(sotedArr)\n\n// el metodo with() permite modificar un elemnto por su indice y devielve un nuevo array\nlet arr2 = ['manzana', 'banana','cereza']\nlet newArr2 = arr2.with(1, 'arandano')\n\nconsole.log(newArr2) // Salida: [ 'manzana', 'arandano', 'cereza' ]\n```\n\nExisten mas versiones como las ES15 y la ES16 que salieron recientemente y comprenden los años 2024 y 2025, hablare sobre las novedades que se introdujeron en estas ultimas versiones en un proximo articulo, así Tambien como las propuestas que están abiertas para posibles implementaciones al lenguaje.\n\n## ¿Como evoluciona ECMAScript?\n\nEl desarrollo de las especificaciones de ECMAScript es supervisado por el comité Ecma TC39\n\nSigue en proceso estructurado donde las propuestas avanzan por varias etapas, desde una idea inicial hasta convertirse en una característica finalizada, probada e implementada. Este proceso es transparente y permite la participación tanto de los miembros del comité como de la comunidad en general\n\n---\n\nComo hemos visto, la evolución de ECMAScript es un proceso riguroso de prueba y validación. Cada avance, como los de ECMAScript 2023, juega un papel crucial en hacer de JavaScript un lenguaje mas robusto, dinámico y capaz de enfrentar las cambiantes demandas del mundo digital.\n\nEn","src/content/articles/EcmaScript-y-sus-versiones.mdx","9c96468092c58c8b","EcmaScript-y-sus-versiones.mdx",true,"projects",["Map",26,27,62,63,85,86,103,104],"flashgas",{"id":26,"data":28,"filePath":59,"digest":60,"legacyId":61,"deferredRender":23},{"title":29,"description":30,"img":31,"date":32,"status":33,"links":34,"tags":43,"tech":47,"author":15,"authorImg":57,"authorUrl":58},"Flashgas","Aplicacion web que conecta a usuarios con minoristas para la compra y recarga de gas","/img/projects/flashgas.jpg",["Date","2025-02-15T00:00:00.000Z"],"Completado",[35,39],{"name":36,"url":37,"icon":38},"Preview","https://app.flashgas.com/","Link",{"name":40,"url":41,"icon":42},"Code","https://github.com/Flash-Gas/user-panel","CodeSvg",[44,45,46],"web","freelance","startup",[48,51,54],{"name":49,"icon":50},"Next.js","Nextjs",{"name":52,"icon":53},"React.js","React",{"name":55,"icon":56},"Tailwind CSS","Tailwind","https://i.postimg.cc/NFWHSKHV/ES-ILUSTRATION.jpg","https://www.recyclingbikes.co/","src/content/projects/flashgas.mdx","407fd7bf5dc7b675","flashgas.mdx","gesccol",{"id":62,"data":64,"body":81,"filePath":82,"digest":83,"legacyId":84,"deferredRender":23},{"title":65,"description":66,"img":67,"date":68,"links":69,"tags":72,"tech":74,"author":15,"authorImg":57,"authorUrl":58},"Gesccol E.I.C.E","Sitio web del gestor catastral de Sahagún, Córdoba, para la difusión de información pública a la ciudadanía sobre el catastro multiproposito.","/img/projects/gesccol.jpg",["Date","2025-02-15T00:00:00.000Z"],[70],{"name":40,"url":71,"icon":42},"https://github.com/dantech99/Gesccol-Web-App",[44,45,73],"empresa",[75,76,78],{"name":55,"icon":56},{"name":77,"icon":77},"Laravel",{"name":79,"icon":80},"PHP","Php","Desarrollé y mantuve el sitio web para la empresa de gestión catastral de Colombia, enfocado en la publicación y administración eficiente de comunicados, informes y servicios para la ciudadanía.\nParticipé activamente como desarrollador principal, realizando más de 40 contribuciones directas en el código.\n\nLogros destacados:\n\n- Implementación de funcionalidades clave para la gestión de comunicados y servicios en línea.\n- Optimización de la interfaz de usuario usando JavaScript, CSS y Blade.\n- Integración de funcionalidades administrativas para facilitar la publicación de información oficial.\n- Refactorización de módulos para mejorar la mantenibilidad y escalabilidad del proyecto.\n- Apoyo en la integración de backend en PHP y frontend en tecnologías web modernas.\n\nTa|reas realizadas:\n\n- Desarrollo de nuevos módulos y componentes de la web.\n- Solución |de bugs y mejoras de seguridad.\n- Optimización de rendimiento y experiencia de usuario.\n- Creación de sistemas de administración y publicación de contenido.\n- Pruebas, documentación y despliegue de nuevas versiones.","src/content/projects/gesccol.mdx","a3869482e4800b69","gesccol.mdx","nutriasoft",{"id":85,"data":87,"filePath":100,"digest":101,"legacyId":102,"deferredRender":23},{"title":88,"description":89,"img":90,"date":91,"status":33,"links":92,"tags":97,"tech":98,"author":15,"authorImg":57,"authorUrl":58},"NutriaSoft.dev","Landing page para la startup nutriasoft que ofrece servicios software","/img/projects/nutriasoft.jpg",["Date","2025-02-15T00:00:00.000Z"],[93,95],{"name":36,"url":94,"icon":38},"https://nutriasoft.dev/",{"name":40,"url":96,"icon":42},"https://github.com/NutriaSoft/nutriasoft.dev",[44,45,46],[99],{"name":49,"icon":50},"src/content/projects/nutriasoft.mdx","560ffb810187a08a","nutriasoft.mdx","recycling-bikes",{"id":103,"data":105,"body":119,"filePath":120,"digest":121,"legacyId":122,"deferredRender":23},{"title":106,"description":107,"img":108,"date":109,"status":33,"links":110,"tags":114,"tech":115,"author":15,"authorImg":57,"authorUrl":58},"Recycling Bikes","Aplicación web de comercio electrónico para la renta y compra de bicicletas usadas.","/img/projects/recycling.jpg",["Date","2025-02-15T00:00:00.000Z"],[111,112],{"name":36,"url":58,"icon":38},{"name":40,"url":113,"icon":42},"https://github.com/Recycling-Bikes/recycling-web",[44,45,46],[116,117,118],{"name":49,"icon":50},{"name":55,"icon":56},{"name":52,"icon":53},"Descripción general: Participé activamente en el desarrollo de nuevas funcionalidades para la web, enfocándome principalmente en la implementación de un nuevo método de paginación. Mi trabajo incluyó la integración, optimización y despliegue de mejoras significativas en la experiencia de usuario y rendimiento.\n\nLogros destacados:\n\n- Implementación de un nuevo sistema de paginación eficiente, facilitando la navegación entre grandes conjuntos de datos.\n- Refactorización de múltiples archivos y módulos para soportar el nuevo método de paginación, con un total de 39 archivos modificados.\n- Realización de 1353 líneas de código añadidas y 775 eliminadas, demostrando un trabajo exhaustivo de mejora y limpieza de código.\n- Gestión de 142 commits, lo que refleja un proceso iterativo, con pruebas, ajustes y mejoras continuas.\n\nTareas realizadas:\n\n- Diseño y desarrollo del sistema de paginación personalizado.\n- Integración de la lógica de paginación en los componentes principales de la web.\n- Refactorización de código existente para mejorar la mantenibilidad y escalabilidad.\n- Optimización del desempeño en la carga y visualización de datos paginados.\n- Documentación y pruebas del sistema implementado.","src/content/projects/recycling-bikes.mdx","8ca6886a79188818","recycling-bikes.mdx","certificates",["Map",125,126,143,144,161,162,179,180],"certificado-1",{"id":125,"data":127,"body":133,"filePath":134,"digest":135,"rendered":136,"legacyId":142},{"id":128,"title":129,"description":130,"image":131,"date":132},"cert-1","Desarrollo Web Frontend","Certificación en desarrollo web frontend con React y TypeScript","/img/certificates/frontend-cert.jpg","2024-01-15","Certificación obtenida en desarrollo web frontend, enfocándose en las tecnologías modernas como React, TypeScript y mejores prácticas de desarrollo.","src/content/certificates/certificado-1.md","8439f25d13228824",{"html":137,"metadata":138},"\u003Cp>Certificación obtenida en desarrollo web frontend, enfocándose en las tecnologías modernas como React, TypeScript y mejores prácticas de desarrollo.\u003C/p>",{"headings":139,"imagePaths":140,"frontmatter":141},[],[],{"id":128,"title":129,"description":130,"image":131,"date":132},"certificado-1.md","certificado-2",{"id":143,"data":145,"body":151,"filePath":152,"digest":153,"rendered":154,"legacyId":160},{"id":146,"title":147,"description":148,"image":149,"date":150},"cert-2","JavaScript Avanzado","Certificación en JavaScript avanzado y programación asíncrona","/img/certificates/javascript-cert.jpg","2024-02-20","Certificación en JavaScript avanzado, incluyendo conceptos de programación asíncrona, promesas, async/await y patrones de diseño modernos.","src/content/certificates/certificado-2.md","59899b03e5dd8b7b",{"html":155,"metadata":156},"\u003Cp>Certificación en JavaScript avanzado, incluyendo conceptos de programación asíncrona, promesas, async/await y patrones de diseño modernos.\u003C/p>",{"headings":157,"imagePaths":158,"frontmatter":159},[],[],{"id":146,"title":147,"description":148,"image":149,"date":150},"certificado-2.md","certificado-3",{"id":161,"data":163,"body":169,"filePath":170,"digest":171,"rendered":172,"legacyId":178},{"id":164,"title":165,"description":166,"image":167,"date":168},"cert-3","Responsive Web Design","Certificación en diseño web responsivo y CSS moderno","/img/certificates/responsive-cert.jpg","2024-03-10","Certificación en diseño web responsivo, CSS Grid, Flexbox y mejores prácticas para crear interfaces adaptables a diferentes dispositivos.","src/content/certificates/certificado-3.md","9182e8222f07a202",{"html":173,"metadata":174},"\u003Cp>Certificación en diseño web responsivo, CSS Grid, Flexbox y mejores prácticas para crear interfaces adaptables a diferentes dispositivos.\u003C/p>",{"headings":175,"imagePaths":176,"frontmatter":177},[],[],{"id":164,"title":165,"description":166,"image":167,"date":168},"certificado-3.md","certificado-4",{"id":179,"data":181,"body":187,"filePath":188,"digest":189,"rendered":190,"legacyId":196},{"id":182,"title":183,"description":184,"image":185,"date":186},"cert-4","Node.js Backend Development","Certificación en desarrollo backend con Node.js y Express","/img/certificates/nodejs-cert.jpg","2024-04-05","Certificación en desarrollo backend con Node.js, Express, bases de datos y arquitectura de APIs RESTful.","src/content/certificates/certificado-4.md","d8cfdee39bebc81a",{"html":191,"metadata":192},"\u003Cp>Certificación en desarrollo backend con Node.js, Express, bases de datos y arquitectura de APIs RESTful.\u003C/p>",{"headings":193,"imagePaths":194,"frontmatter":195},[],[],{"id":182,"title":183,"description":184,"image":185,"date":186},"certificado-4.md"]